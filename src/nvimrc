call pathogen#infect()
call pathogen#helptags()
set nocompatible
syntax on
filetype plugin indent on

set dir=/tmp//
set hlsearch
set lazyredraw
set number
set ruler
set scrolloff=5
set textwidth=0 nosmartindent tabstop=2 shiftwidth=2 softtabstop=2 expandtab
set wrap

let g:solarized_termcolors=256
set background=light
colorscheme solarized

let mapleader=","

" no arrow keys in normal and insert modes
"nnoremap <up> <nop>
"nnoremap <down> <nop>
"nnoremap <left> <nop>
"nnoremap <right> <nop>
"inoremap <up> <nop>
"inoremap <down> <nop>
"inoremap <left> <nop>
"inoremap <right> <nop>
"vnoremap <up> <nop>
"vnoremap <down> <nop>
"vnoremap <left> <nop>
"vnoremap <right> <nop>

" fat fingers: map f1 to escape instead of help
map <F1> <Esc>
imap <F1> <Esc>

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Languange-specific settings
autocmd FileType ruby runtime ruby_mappings.vim
autocmd FileType python setlocal tabstop=4 shiftwidth=4 softtabstop=4
autocmd FileType css setlocal tabstop=2 shiftwidth=2 softtabstop=2
autocmd FileType html setlocal tabstop=2 shiftwidth=2 softtabstop=2
autocmd FileType c setlocal tabstop=2 shiftwidth=2 softtabstop=2
autocmd FileType javascript setlocal tabstop=4 shiftwidth=4 softtabstop=4
autocmd BufNewFile,BufRead *.txt setlocal textwidth=78
autocmd BufNewFile,BufRead *.txt setlocal spell spelllang=en_us

" Rakefile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,config.ru} set ft=ruby

" Launch the rocket
imap <C-L> <SPACE>=><SPACE>

" Relative line numbers
function! g:ToggleNuMode()
 if(&rnu == 1)
   set nu
 else
   set rnu
 endif
endfunc
map <silent> <Leader>rl :call g:ToggleNuMode()<CR>

" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc

" vimrc
map <silent> <Leader>con :e $MYVIMRC<CR>
map <silent> <Leader>lcon :source $MYVIMRC<CR>

" ctrlp
map <silent> <Leader>t :CtrlP<CR>
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git\|tmp'

" Command-T
"map <silent> <Leader>ff :CommandT<CR>
"map <silent> <Leader>t :CommandT<CR>
"map <silent> <Leader>b :CommandTBuffer<CR>
"map <silent> <Leader>tf :CommandTFlush<CR>

map <Leader>rj :call VimuxRunCommand("clear; teaspoon " .bufname("%"))<CR>

" NERDTree
map <silent> <Leader>nt :NERDTreeToggle<CR>

" vimux
"map <Leader>rb :RunAllRubyTests<CR>
map <Leader>rb :call VimuxRunCommand("clear; rspec " .bufname("%"))<CR>
map <Leader>rc :RunRubyFocusedContext<CR>
map <Leader>ri :VimuxInspectRunner<CR>
map <Leader>rs :RunRubyFocusedTest<CR>
map <Leader>rt :call VimuxRunCommand("clear; mix test")<CR>

fun! <SID>StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun

"autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()
map <Leader>cw :call <SID>StripTrailingWhitespaces()<CR>

" Highlight trailing whitespace
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd BufRead,InsertLeave * match ExtraWhitespace /\s\+$/
highlight ExtraWhitespace ctermbg=red guibg=red
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
map <silent> <Leader>ws :highlight clear ExtraWhitespace<CR>

" Highlight too-long lines
"autocmd BufRead,InsertEnter,InsertLeave * 2match LineLengthError /\%126v.*/ asdfasdfas adfsasd fasdf asdf asdf asdfa sdf asdf asdf asd fasd fa sdf asdf asd fasd fasd f
"highlight LineLengthError ctermbg=black guibg=black
"autocmd ColorScheme * highlight LineLengthError ctermbg=black guibg=black

" Fix for crontab -e
autocmd filetype crontab setlocal nobackup nowritebackup

" Status bar
set laststatus=2
set statusline=
set statusline+=%<\                       " cut at start
set statusline+=%2*[%n%H%M%R%W]%*\        " buffer number, and flags
set statusline+=%-40f\                    " relative path
set statusline+=%=                        " seperate between right- and left-aligned
set statusline+=%1*%y%*%*\                " file type
set statusline+=%10(L(%l/%L)%)\           " line
set statusline+=%2(C(%v/125)%)\           " column
set statusline+=%P                        " percentage of file

" Open git command results in a quickfix window
autocmd QuickFixCmdPost *grep* cwindow

function! GitGrepWord()
    cgetexpr system("git grep -n '" . expand("<cword>") . "'")
      cwin
        echo 'Number of matches: ' . len(getqflist())
endfunction
command! -nargs=0 GitGrepWord :call GitGrepWord()
nnoremap <silent> <Leader>gw :GitGrepWord<CR>
